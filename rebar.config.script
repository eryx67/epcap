TMPDIR = os:getenv("TMPDIR", "/tmp"),

PFRING_DIR = "priv/pfring/usr/local",
PFRING_LIB_DIR = filename:absname(filename:join(PFRING_DIR, "lib")),
PFRING_INC_DIR = filename:absname(filename:join(PFRING_DIR, "include")),

Compile = fun(Name0, Prog) ->
    Name = filename:join(TMPDIR, Name0),
    ok = file:write_file(Name, Prog, [write, exclusive]),
    Cmd = case os:getenv("PFRING") of
              false ->
                  erlang:open_port({spawn, ["${CC-cc} -o /dev/null ", Name, " -lpcap"]},
                                   [stream, exit_status]);
              _ ->
                  erlang:open_port({spawn, ["${CC-cc} -o /dev/null ", Name,
                                    " -I", PFRING_INC_DIR, " -L", PFRING_LIB_DIR, " -lpcap"]},
                                   [stream, exit_status])
          end,
    Status = receive
        {Cmd, {exit_status, 0}} ->
            true;
        {Cmd, {exit_status, _}} ->
            false
    end,
    ok = file:delete(Name),
    Status
end,

Test = fun(Name, Prog, Supported, Unsupported) ->
    case Compile(Name, Prog) of
        true ->
            Supported;
        false ->
            Unsupported
    end
end,

Append = fun(Str, Flag) ->
    string:join(sets:to_list(sets:add_element(Flag,
                    sets:from_list(string:tokens(Str, " ")))), " ")
end,

Setenv = fun(Key, Val) ->
    Cur = os:getenv(Key, ""),
    os:putenv(Key, Append(Cur, Val))
end,

%%
%% Tests
%%

PFRING = fun(Config) ->
                 case os:getenv("PFRING") of
                     false ->
                         true = Setenv("EPCAP_LDFLAGS", "-lpcap");
                     _ ->
                         true = Setenv("EPCAP_LDFLAGS",
                                       string:join([filename:join(PFRING_LIB_DIR, "libpcap.a"),
                                                    filename:join(PFRING_LIB_DIR, "libpfring.a"),
                                                    "-lpthread -ldl"
                                                   ], " ")),
                         true = Setenv("EPCAP_CFLAGS",
                                       "-I" ++ PFRING_INC_DIR
                                      ++ " -DHAVE_PF_RING -DENABLE_BPF -DHAVE_PF_RING_ZC")
                 end,
                 Config
         end,

Pcap_create = fun(Config) ->
    Check = "
#include <pcap.h>
int main(int argc, char *argv[])
{
    char errbuf[PCAP_ERRBUF_SIZE];
    (void)pcap_create(NULL, errbuf);
    return 0;
}",

    Flag = Test("test_pcap_create.c", Check, "-DHAVE_PCAP_CREATE", ""),
    true = Setenv("EPCAP_CFLAGS", Flag),
    Config
end,

lists:foldl(fun(Fun, Cfg) ->
        Fun(Cfg)
    end,
    CONFIG,
    [PFRING, Pcap_create]
    ).
